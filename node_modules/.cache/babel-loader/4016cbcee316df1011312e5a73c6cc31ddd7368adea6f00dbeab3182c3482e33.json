{"ast":null,"code":"let medium_1 = [];\nlet medium_2 = [];\nlet medium_3 = [];\nlet hard_1 = [];\nlet hard_2 = [];\nlet hard_3 = [];\nexport let isGameWon = false;\nfunction addHitIndicator(cell) {\n  document.getElementById(\"win-dialog\");\n  const hitbox = document.createElement(\"div\");\n  hitbox.classList.add(\"hitbox\");\n  return cell.appendChild(hitbox);\n}\nfunction checkForWin(board, cellID) {\n  const clickedCell = document.getElementById(cellID);\n  if (board === \"easy-1\" || board === \"medium-1\") {\n    console.log(clickedCell, \"clickedcle\");\n    addHitIndicator(clickedCell);\n    console.log(clickedCell, \"clickedcell 2\");\n    if (board === \"easy.1\") {\n      isGameWon = true;\n    }\n    // board === \"easy-1\"\n    //   ? (isGameWon = true) /// win for easy 1\n    //   : medium_1.length < 1\n    //   ? medium_1.push(true)\n    //   : alert(\"win\"); /// win for medium 1\n  } else if (board === \"easy-2\" || board === \"medium-2\") {\n    addHitIndicator(clickedCell);\n    board === \"easy-2\" ? alert(\"win\") /// win for easy 2\n    : medium_2.length < 1 ? medium_2.push(true) : alert(\"win\"); /// win for medium 2\n  } else if (board === \"easy-3\" || board === \"hard-3\") {\n    addHitIndicator(clickedCell);\n    board === \"easy-3\" ? alert(\"win\") /// win for easy 3\n    : hard_3.length < 3 ? hard_3.push(true) : alert(\"win\"); /// win for hard 3\n  } else if (board === \"medium-3\" || \"hard-2\") {\n    addHitIndicator(clickedCell);\n    if (board === \"medium-3\") {\n      medium_3.length < 1 ? medium_3.push(true) : alert(\"win\"); /// win for medium 3\n    } else {\n      hard_2.length < 3 ? hard_2.push(true) : alert(\"win\"); /// win for hard 2\n    }\n  } else if (board === \"hard-1\") {\n    hard_1.length < 3 ? hard_1.push(true) : alert(\"win\"); ///win for hard 1\n  }\n\n  return clickedCell.id = \"\";\n}\nfunction gamerules(cellid, gameImg) {\n  if (!cellid && !gameImg) {\n    medium_1 = [];\n    medium_2 = [];\n    medium_3 = [];\n    hard_1 = [];\n    hard_2 = [];\n    hard_3 = [];\n    return;\n  }\n  const clickedCell = Number(cellid.split(\"-\")[1]);\n  const imageNameRegex = /(medium|easy|hard)-\\d+/;\n  const boardName = gameImg.match(imageNameRegex)[0];\n  const targetingBox = document.getElementById(\"targeting-box\");\n  targetingBox.classList.remove(\"miss-targeting-box\");\n  switch (boardName) {\n    case \"easy-1\":\n      if (clickedCell === 310) checkForWin(boardName, cellid);\n    case \"easy-2\":\n      if (clickedCell === 591) checkForWin(boardName, cellid);\n    case \"easy-3\":\n      if (clickedCell === 422) checkForWin(boardName, cellid);\n    case \"medium-1\":\n      if (clickedCell === 261 || clickedCell === 310) checkForWin(boardName, cellid);\n    case \"medium-2\":\n      if (clickedCell === 635 || clickedCell === 591) checkForWin(boardName, cellid);\n    case \"medium-3\":\n      if (clickedCell === 482 || clickedCell === 460) checkForWin(boardName, cellid);\n    case \"hard-1\":\n      if (clickedCell === 159 || clickedCell === 583 || clickedCell === 586 || clickedCell === 60) checkForWin(boardName, cellid);\n    case \"hard-2\":\n      if (clickedCell === 482 || clickedCell === 460 || clickedCell === 406 || clickedCell === 542) checkForWin(boardName, cellid);\n    case \"hard-3\":\n      if (clickedCell === 422 || clickedCell === 201 || clickedCell === 482 || clickedCell === 615) checkForWin(boardName, cellid);\n    default:\n      targetingBox.animate([{\n        transform: \"translate(0)\"\n      }, {\n        transform: \"translate(-3px)\"\n      }, {\n        transform: \"translate(3px)\"\n      }, {\n        boxShadow: \"0 0 3px 4px   rgb(255, 122, 122)\"\n      }], {\n        duration: 90,\n        iterations: 2\n      });\n      return;\n  }\n}\nexport default gamerules;","map":{"version":3,"names":["medium_1","medium_2","medium_3","hard_1","hard_2","hard_3","isGameWon","addHitIndicator","cell","document","getElementById","hitbox","createElement","classList","add","appendChild","checkForWin","board","cellID","clickedCell","console","log","alert","length","push","id","gamerules","cellid","gameImg","Number","split","imageNameRegex","boardName","match","targetingBox","remove","animate","transform","boxShadow","duration","iterations"],"sources":["/home/fernando/Repositories/where-is-waldo/src/utils/gamerules.js"],"sourcesContent":["let medium_1 = [];\nlet medium_2 = [];\nlet medium_3 = [];\nlet hard_1 = [];\nlet hard_2 = [];\nlet hard_3 = [];\nexport let isGameWon = false;\n\nfunction addHitIndicator(cell) {\n  document.getElementById(\"win-dialog\");\n  const hitbox = document.createElement(\"div\");\n  hitbox.classList.add(\"hitbox\");\n  return cell.appendChild(hitbox);\n}\n\nfunction checkForWin(board, cellID) {\n  const clickedCell = document.getElementById(cellID);\n  if (board === \"easy-1\" || board === \"medium-1\") {\n    console.log(clickedCell, \"clickedcle\");\n    addHitIndicator(clickedCell);\n    console.log(clickedCell, \"clickedcell 2\");\n    if (board === \"easy.1\") {\n      isGameWon = true;\n    }\n    // board === \"easy-1\"\n    //   ? (isGameWon = true) /// win for easy 1\n    //   : medium_1.length < 1\n    //   ? medium_1.push(true)\n    //   : alert(\"win\"); /// win for medium 1\n  } else if (board === \"easy-2\" || board === \"medium-2\") {\n    addHitIndicator(clickedCell);\n    board === \"easy-2\"\n      ? alert(\"win\") /// win for easy 2\n      : medium_2.length < 1\n      ? medium_2.push(true)\n      : alert(\"win\"); /// win for medium 2\n  } else if (board === \"easy-3\" || board === \"hard-3\") {\n    addHitIndicator(clickedCell);\n    board === \"easy-3\"\n      ? alert(\"win\") /// win for easy 3\n      : hard_3.length < 3\n      ? hard_3.push(true)\n      : alert(\"win\"); /// win for hard 3\n  } else if (board === \"medium-3\" || \"hard-2\") {\n    addHitIndicator(clickedCell);\n    if (board === \"medium-3\") {\n      medium_3.length < 1 ? medium_3.push(true) : alert(\"win\"); /// win for medium 3\n    } else {\n      hard_2.length < 3 ? hard_2.push(true) : alert(\"win\"); /// win for hard 2\n    }\n  } else if (board === \"hard-1\") {\n    hard_1.length < 3 ? hard_1.push(true) : alert(\"win\"); ///win for hard 1\n  }\n  return (clickedCell.id = \"\");\n}\n\nfunction gamerules(cellid, gameImg) {\n  if (!cellid && !gameImg) {\n    medium_1 = [];\n    medium_2 = [];\n    medium_3 = [];\n    hard_1 = [];\n    hard_2 = [];\n    hard_3 = [];\n    return;\n  }\n  const clickedCell = Number(cellid.split(\"-\")[1]);\n  const imageNameRegex = /(medium|easy|hard)-\\d+/;\n  const boardName = gameImg.match(imageNameRegex)[0];\n  const targetingBox = document.getElementById(\"targeting-box\");\n  targetingBox.classList.remove(\"miss-targeting-box\");\n\n  switch (boardName) {\n    case \"easy-1\":\n      if (clickedCell === 310) checkForWin(boardName, cellid);\n    case \"easy-2\":\n      if (clickedCell === 591) checkForWin(boardName, cellid);\n    case \"easy-3\":\n      if (clickedCell === 422) checkForWin(boardName, cellid);\n\n    case \"medium-1\":\n      if (clickedCell === 261 || clickedCell === 310)\n        checkForWin(boardName, cellid);\n    case \"medium-2\":\n      if (clickedCell === 635 || clickedCell === 591)\n        checkForWin(boardName, cellid);\n    case \"medium-3\":\n      if (clickedCell === 482 || clickedCell === 460)\n        checkForWin(boardName, cellid);\n\n    case \"hard-1\":\n      if (\n        clickedCell === 159 ||\n        clickedCell === 583 ||\n        clickedCell === 586 ||\n        clickedCell === 60\n      )\n        checkForWin(boardName, cellid);\n    case \"hard-2\":\n      if (\n        clickedCell === 482 ||\n        clickedCell === 460 ||\n        clickedCell === 406 ||\n        clickedCell === 542\n      )\n        checkForWin(boardName, cellid);\n    case \"hard-3\":\n      if (\n        clickedCell === 422 ||\n        clickedCell === 201 ||\n        clickedCell === 482 ||\n        clickedCell === 615\n      )\n        checkForWin(boardName, cellid);\n    default:\n      targetingBox.animate(\n        [\n          { transform: \"translate(0)\" },\n          { transform: \"translate(-3px)\" },\n          { transform: \"translate(3px)\" },\n          { boxShadow: \"0 0 3px 4px   rgb(255, 122, 122)\" },\n        ],\n        {\n          duration: 90,\n          iterations: 2,\n        }\n      );\n      return;\n  }\n}\n\nexport default gamerules;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}